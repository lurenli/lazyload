@charset "UTF-8";
/* line 3, src/css/_fws/reset/_entry.scss */
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font-family: -apple-system, Tahoma, "Microsoft YaHei", "WenQuanYi Micro Hei", "PingFang SC", Helvetica, arial;
  vertical-align: baseline;
}

/* line 7, src/css/_fws/reset/_entry.scss */
html {
  font-size: 100px;
  line-height: 1;
}

/* line 10, src/css/_fws/reset/_entry.scss */
body {
  font-size: 50px;
}

/* line 13, src/css/_fws/reset/_entry.scss */
ol, ul {
  list-style: none;
}

/* line 16, src/css/_fws/reset/_entry.scss */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* line 19, src/css/_fws/reset/_entry.scss */
caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

/* line 22, src/css/_fws/reset/_entry.scss */
q, blockquote {
  quotes: none;
}

/* line 97, src/css/_fws/reset/_entry.scss */
q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none;
}

/* line 25, src/css/_fws/reset/_entry.scss */
a img {
  border: none;
}

/* line 110, src/css/_fws/reset/_entry.scss */
elements-of-type(html5-block) {
  display: block;
}

/*# sourceMappingURL=data:application/json;base64, */